---
interface Props {
  title: string
  callout?: string
  callout_style?: string
}

const { title, callout, callout_style } = Astro.props

const get_scale = (text: string) => {
  const len = text.length

  if (len > 20) return 0.3
  if (len > 14) return 0.32
  if (len > 12) return 0.35
  if (len >= 6) return 0.4
  if (len <= 2) return 1

  return 1 - (len - 2) * 0.2
  // return 0.2 + 0.6 * Math.exp(-0.1 * len);
}

const compress_rate = Math.min(
  ...title.split("\\n").map((line) => get_scale(line)),
)
---

<header class="grid">
  <h1
    class="bold grid place-content-center overflow-hidden border-b border-black
      px-[1.2rem] py-8 text-center font-semibold uppercase leading-[0.8]
      sm:px-[2rem]"
  >
    {
      title.split("\\n").map((line) => (
        <span
          class="ios-will-change inline-block max-w-full transform whitespace-nowrap font-pagetitle text-[clamp(2rem,20vw,10rem)] tracking-[-0.02em] antialiased"
          style={`transform: scaleX(${compress_rate});`}
        >
          {line}
        </span>
      ))
    }
  </h1>
  {
    callout && (
      <div class="flex justify-self-center">
        <small
          class={`flex items-center justify-center gap-[.25em] border border-t-0 border-black px-4 py-2 ${callout_style ?? "text-sm"}`}
        >
          {callout}
        </small>
      </div>
    )
  }
</header>
